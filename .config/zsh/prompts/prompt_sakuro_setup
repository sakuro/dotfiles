#!/bin/zsh

function prompt_sakuro_setup() {
  zstyle ':vcs_info:*'     formats       '%F{blue}%b%f' '%S'
  zstyle ':vcs_info:*'     actionformats '%b%F{cyan}:%F{red}%a%f'
  zstyle ':vcs_info:svn:*' branchformat  '%F{blue}%b%F{cyan}:%fr%r'
  zstyle ':vcs_info:*' enable git svn hg bzr cvs

  prompt_sakuro_load_default_styles

  source ~/.config/zsh/prompts/prompt_duration
  add-zsh-hook precmd prompt_sakuro_precmd
}

function prompt_sakuro_load_default_styles() {
  zstyle ':prompt:sakuro:prompt' symbol '$'
  zstyle ':prompt:sakuro:prompt' success_style green
  zstyle ':prompt:sakuro:prompt' failure_style red
}

function prompt_sakuro_precmd() {
  local last_status=$?
  autoload -Uz vcs_info

  psvar=()

  [[ -n "$prompt_duration" ]] && print -P "%F{yellow}$prompt_duration%f"

  local -a main_line=(
    "$(prompt_sakuro_user)@$(prompt_sakuro_host)"
    "$(prompt_sakuro_pwd)"
    "$(prompt_sakuro_vcs)"
    "$(prompt_sakuro_ruby)"
    "$(prompt_sakuro_kube)"
    "$(prompt_sakuro_aws)"
  )
  local -a final_line=(
    "$(prompt_sakuro_prompt $last_status)"
  )

  psvar+="${(j: :)main_line}"
  psvar+="${(j: :)final_line}"' '

  PROMPT=${(F)psvar}
}

function prompt_sakuro_user() {
  print -nP "%n"
}


function prompt_sakuro_host() {
  local -i ncpu=$(sysctl -n hw.ncpu)

  if [[ -r /proc/loadavg ]]; then
    set -- $(< /proc/loadavg)
  elif [[ -x /usr/sbin/sysctl ]]; then
    set -- $(/usr/sbin/sysctl -n vm.loadavg)
    shift
  fi

  [[ -n "$1" ]] && {
    local -i load_average=$(($1 / $ncpu)) # round down fraction
    local brightness=dark

    case "$brightness-$load_average" in
    *-0)     print -nP '%F{gray}%m%f'    ;;
    light-1) print -nP '%F{cyan}%m%f'    ;;
    dark-1)  print -nP '%F{yellow}%m%f'  ;;
    light-2) print -nP '%F{green}%m%f'   ;;
    dark-2)  print -nP '%F{magenta}%m%f' ;;
    *)       print -nP '%F{red}%m%f'     ;;
    esac
  }
}

function prompt_sakuro_pwd() {
  local pwd_symbol="\uf115"
  local result
  local vcs_info_msg_0_ vcs_info_msg_1_
  LANG=C vcs_info

  local base_path="$(print -P '%~')"
  # remove repository_part($vcs_info_msg_1_)
  [[ -n "$vcs_info_msg_0_" && $vcs_info_msg_1_ != '.' ]] && base_path="${base_path%/$vcs_info_msg_1_}"

  typeset -la path_elements
  set -A path_elements ${(s:/:)base_path}

  if [[ $#path_elements -gt 2 ]]; then
    local first="$path_elements[1]"
    [[ "$first" = '~'* ]] || first="/$first"
    local last="$path_elements[-1]"
    base_path="$first/"${(j:/:)$(print -P '%2>.>'${^${(@)path_elements[2,-2]}})}/"$last"
  fi

  result="%F{magenta}${pwd_symbol} $base_path%f"
  [[ -n "$vcs_info_msg_1_" && "$vcs_info_msg_1_" != '.' ]] && result+="/%F{cyan}$vcs_info_msg_1_%f"

  print -n "${result}"
}

function prompt_sakuro_vcs() {
  local vcs_symbol="\ue725"
  local vcs_info_msg_0_
  LANG=C vcs_info

  [[ -n "$vcs_info_msg_0_" ]] && print -n "%F{blue}${vcs_symbol}%f $vcs_info_msg_0_"
}

function prompt_sakuro_aws() {
  local aws_symbol="\uf270"
  [[ -n "$AWS_PROFILE" ]] && print -nP "%F{yellow}${aws_symbol} $AWS_PROFILE%f"
}

function prompt_sakuro_kube() {
  local kube_symbol="\u2388"
  if is-executable kubectl; then
    local kube_context=$(kubectl config current-context 2> /dev/null)
    [[ -n "$kube_context" ]] && print -nP "%F{cyan}${kube_symbol}$kube_context%f"
  fi
}

function prompt_sakuro_ruby() {
  local ruby_symbol="\ue23e"
  local ruby_version_array=( $(asdf current ruby) )
  local ruby_version=$ruby_version_array[2]
  [[ $? == 0 ]] && print -nP "%F{red}${ruby_symbol} ${ruby_version}%f"
}

function prompt_sakuro_style_for() {
  local partial_context=$1
  shift

  local style_name style_value
  while (( $# > 1 )); do
    style_name=$1
    zstyle -s ":prompt:sakuro:$partial_context" $style_name style_value
    if [[ -n "$style_value" ]]; then
      echo "$style_value"
      return
    fi
    shift
  done
  echo $1
}

function prompt_sakuro_prompt() {
  local last_status=$1
  local symbol style

  if [[ $last_status = 0 ]]; then
    symbol=$(prompt_sakuro_style_for prompt success_symbol symbol '$')
    style=$(prompt_sakuro_style_for prompt success_style style green)
  else
    symbol=$(prompt_sakuro_style_for prompt failure_symbol symbol '$')
    style=$(prompt_sakuro_style_for prompt failure_style style red)
  fi

  print -nP "%F{$style}$symbol%f"
}

prompt_sakuro_setup "$@"
