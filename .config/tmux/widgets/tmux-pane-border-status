#!/bin/zsh

autoload is-executable
autoload upfind
autoload vcs_info

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' check-for-staged-changes true
zstyle ':vcs_info:git:*' formats '#[fg=blue]%b#[fg=green]%c#[fg=red]%u#[default]' '%S'
zstyle ':vcs_info:git:*' actionformats '#[fg=blue]%b#[default]:#[fg=red]%a#[default]'
zstyle ':vcs_info:git:*' stagedstr 'M'
zstyle ':vcs_info:git:*' unstagedstr 'M'

function tmux-pane-pwd() {
    local pwd_symbol="\U1F4C1"
    local base_path="$(print -P '%~')"
    local result

    # remove repository_part($vcs_info_msg_1_)
    [[ -n "$vcs_info_msg_0_" && $vcs_info_msg_1_ != '.' ]] && base_path="${base_path%/$vcs_info_msg_1_}"
    typeset -la path_elements
    set -A path_elements ${(s:/:)base_path}

    if [[ $#path_elements -gt 2 ]]; then
      local first="$path_elements[1]"
      [[ "$first" = '~'* ]] || first="/$first"
      local last="$path_elements[-1]"
      base_path="$first/"${(j:/:)$(print -P '%2>.>'${^${(@)path_elements[2,-2]}})}/"$last"
    fi

    result="#[fg=magenta]${pwd_symbol} ${base_path}#[default]"
    [[ -n "$vcs_info_msg_1_" && "$vcs_info_msg_1_" != '.' ]] && result+="/#[fg=cyan]$vcs_info_msg_1_#[default]"

    print "${result}"
}

function tmux-pane-vcs-info() {
    local vcs_symbol="\ue0a0"
    local ahead_symbol="↑"
    local behind_symbol="↓"

    is-executable git || return
    upfind -q .git || return

    set -- $(git status --porcelain=v2 --branch | grep -e '\(branch.ab\|^\?\)')
    local ahead=$( [[ -z "$3" ]] || [[ "$3" = "+0" ]] || print -P "%(?,,#[fg=green]$ahead_symbol${3#+}#[default])" )
    local behind=$( [[ -z "$4" ]] || [[ "$4" = "-0" ]] || print -P "%(?,,#[fg=red]$behind_symbol${4#-}#[default])" )
    local untracked=$( [[ -z "$5" ]] || print -P '%(?,,#[fg=yellow]?#[default])' )

    print -P "#[fg=blue]$vcs_symbol#[default] $vcs_info_msg_0_$untracked$ahead$behind"
}

function tmux-pane-ruby-version() {
    local ruby_symbol="\U1F48E"
    local ruby_version_array
    local ruby_version

    is-executable asdf || return
    ruby_version_array=( $(asdf current ruby) )
    ruby_version=$ruby_version_array[2]

    [[ $? == 0 ]] && print -P "#[fg=red]${ruby_symbol} ${ruby_version}#[default]"
}

function tmux-pane-aws-profile() {
    local aws_symbol="\uf270"
    local aws_profile_path=$(upfind .aws-profile)

    [[ -n "$aws_profile_path" ]] && print -P "#[fg=yellow]${aws_symbol} $(< $aws_profile_path)#[default]"
}

function tmux-pane-kube-context() {
  local kube_symbol="\u2388"
  is-executable kubectl || return

  local kube_context=$(kubectl config current-context 2> /dev/null)
  [[ -n "$kube_context" ]] && print -P "#[fg=cyan]${kube_symbol}$kube_context#[default]"
}

[[ $# -gt 0 ]] && cd $1 && {
  local vcs_info_msg_0_ vcs_info_msg_1_
  LANG=C vcs_info
  set -- "$(tmux-pane-pwd)" "$(tmux-pane-vcs-info)" "$(tmux-pane-ruby-version)" "$(tmux-pane-aws-profile)" "$(tmux-pane-kube-context)"
  echo -n "#P:"; while [[ $# -gt 0 ]]; do echo -n " $1"; shift; done
}
